---
title: "SamplR Summary Report"
fig.height: 4.5
fig.width: 7.5
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}

# devtools::install_github("ropenscilabs/ochRe")
# 
# remotes::install_github("ninoxconsulting/PEMr", build_vignettes = FALSE)
# remotes::install_github("ninoxconsulting/PEMprepr", build_vignettes = FALSE)
# remotes::install_github("ninoxconsulting/PEMsamplr", build_vignettes = FALSE)

# library(PEMr)
# library(PEMprepr)
# require(PEMsamplr)
require(tidyverse)
require(magrittr)
require(terra)
require(sf)
require(pals)
require(showtext)
require(ggtext)
require(gghighlight)
require(ggspatial)
require(gt)
require(tidyterra)
require(ggpmisc)
require(viridis)
require(bcmaps)
# require(ochRe)
```

```{r graphics-setup, include = FALSE}

# pal.parl <- colorRampPalette(ochRe::ochre_palettes[["parliament"]])
# pal.nam <- colorRampPalette(ochRe::ochre_palettes[["namatjira_qual"]])
# font_add_google('Anton', 'anton')
# showtext_auto()

```

This report provides several metrics of interest from the sampling stage of the PEM process, including comparisons of planned samples versus actual samples and various metrics on collected points. More details on the data, methodology, and results from the samplR workflow can be found in the \[PEM Manual\].

Below is a map of the sample plan for the AOI. The sample plan is generated by first developing landscape-level covariates (e.g., biogeoclimatic zones, topographic indices) at a 25m resolution to ensure environmental variability is captured. A cost layer is then created using road networks and terrain difficulty, assigning higher costs to inaccessible areas and recent disturbances. Using these inputs, Conditional Latin Hypercube Sampling (cLHS) is applied to distribute sample points efficiently while maintaining environmental representation, ensuring sites are at least 1000m apart. Paired transects are generated for each site, selecting the most cost-effective transect option based on terrain and accessibility. Finally, the selected sample plan undergoes manual review, with potential site replacements if accessibility issues arise.

```{r get-sample-plan, echo = FALSE, include = FALSE}

# Parse out layer names because we need to check that they all exist for each subzone
layers <- sf::st_layers("C:/Users/ccarmour.stu/OneDrive/PEM_report_files/DateCreek_AOI/transect_layout/s1_sampling.gpkg") %>%
  .$name %>%
  as_tibble() %>%
  rename(layer_name = value) %>%
  dplyr::mutate(szvp = purrr::map_chr(stringr::str_split(layer_name, pattern = "_"), 1),
         szvp = stringr::str_replace_all(szvp, pattern = " ", replacement = ""),
         short_layer_name = purrr::map_chr(stringr::str_split(layer_name, pattern = "_"), ~ paste(.x[-1], collapse = "_")))

# What subzones are presenting in this sample plan?
szvp_sp <- layers %>%
  pull(szvp) %>%
  unique()

# What layers exist for all subzones?
usable_layers <- layers %>%
  count(short_layer_name) %>%
  filter(n == length(szvp_sp)) %>%
  pull(short_layer_name)

# Define a "layers of interest" vector
loi <- vector()

if("transects_all_buffered" %in% usable_layers){
  loi <- layers$layer_name[str_detect(string = layers$layer_name, pattern = "transects_all_buffered$")]
}
if("transects_all" %in% usable_layers & length(loi) == 0){
  loi <- layers$layer_name[str_detect(string = layers$layer_name, pattern = "transects_all$")]
}

  layers_comb <- st_read("C:/Users/ccarmour.stu/OneDrive/PEM_report_files/DateCreek_AOI/transect_layout/s1_sampling.gpkg") %>% filter(FALSE)
  
  for(i in 1:length(loi)){
    layer <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM_report_files/DateCreek_AOI/transect_layout/s1_sampling.gpkg", layer = loi[i])
    if("ID" %in% names(layer)){
      layer <- rename(layer, id = ID)
    }
    layer <- dplyr::select(layer, c("id", "geom"))
    layers_comb <- rbind(layers_comb, layer)
  }

layers_comb <- layers_comb %>%
  mutate(szvp = map_chr(str_split(id, pattern = "_"), 1),
         szvp = str_replace_all(szvp, pattern = " ", replacement = ""),
         szvp = as.factor(szvp),
         id = str_replace_all(id, pattern = " ", replacement = ""))

```

```{r sample-plan-map, echo = FALSE}

#| fig-width: 8
#| fig-height: 4

aoi <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM/PEM_report_files/PEM_report_files/DateCreek_AOI/base_layers/aoi.gpkg")
roads <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM/PEM_report_files/PEM_report_files/DateCreek_AOI/base_layers/roads_vetted.gpkg")


ggplot2::ggplot(data = layers_comb ) +
  tidyterra::geom_spatvector(data = terra::vect(aoi), color = "black", fill = "transparent") +
  tidyterra::geom_spatvector(data = terra::vect(roads), color = "grey", fill = "transparent") +
  tidyterra::geom_spatvector(data = terra::vect(layers_comb ), aes(color = szvp), size = 2) +
  labs(color = "BEC Subzone/Variant") +
  ggspatial::annotation_north_arrow(
    location = "tr", # Position: bottom-right
    which_north = "true", # True North
    pad_x = unit(0.5, "cm"), # Padding from x-axis
    pad_y = unit(0.5, "cm"), # Padding from y-axis
    style = ggspatial::north_arrow_fancy_orienteering() # Style of the arrow
  ) +
  theme(
    legend.position = "bottom"
  )


```

The table below summarizes how many transects were planned for each subzone/variant.

```{r tst-vars, include = FALSE}

tsts <- layers_comb %>%
  sf::st_drop_geometry() %>%
  filter(str_detect(id, pattern = "cLHS")) %>%
  group_by(szvp) %>%
  summarize(cLHS_count = n()) %>%
  mutate(total_count = 2*cLHS_count)

gt(tsts) %>%
  tab_header(
    title = md("**Transects by BEC Subzone/Variant**")
  ) %>%
  cols_label(
    szvp = "",
    cLHS_count = "cLHS only",
    total_count = "cLHS + Paired"
  ) %>%
  grand_summary_rows(
    columns = c(cLHS_count, total_count),  # Numeric columns to summarize
    fns = list(
      Total = ~sum(.)
    )
  )

```

Often, due to constraints in the field or outdated information on roads, cutblocks, or other critical access points, not all transects are able to be sampled. We compare the transect IDs between the sampling plan and the attributed sample data.

```{r}

pts <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM/PEM_report_files/PEM_report_files/DateCreek_AOI/trainingData/att_5m/s1_transect_all_pts_att.gpkg")

tsct_sp <- layers_comb

tsct_sd <- pts %>%
  sf::st_drop_geometry() %>%
  dplyr::mutate(id = transect_id,
         szvp = purrr::map_chr(str_split(id, pattern = "_"), 1),
         szvp = stringr::str_replace_all(szvp, pattern = " ", replacement = ""),
         szvp = as.factor(szvp),
         id = stringr::str_replace_all(id, pattern = " ", replacement = "")) %>%
  dplyr::group_by(id) %>%
  dplyr::summarize(n())

tsct_all <- tsct_sp %>% 
  dplyr::full_join(., tsct_sd, by = "id", keep = TRUE) %>%
  dplyr::filter(!is.na(id.y))



```


```{r sample-plan-map, echo = FALSE}

#| fig-width: 8
#| fig-height: 4

aoi <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM/PEM_report_files/PEM_report_files/DateCreek_AOI/base_layers/aoi.gpkg")
roads <- sf::st_read("C:/Users/ccarmour.stu/OneDrive/PEM/PEM_report_files/PEM_report_files/DateCreek_AOI/base_layers/roads_vetted.gpkg")


ggplot2::ggplot(data = tsct_all) +
  tidyterra::geom_spatvector(data = terra::vect(aoi), color = "black", fill = "transparent") +
  tidyterra::geom_spatvector(data = terra::vect(roads), color = "grey", fill = "transparent") +
  tidyterra::geom_spatvector(data = terra::vect(tsct_all), aes(color = szvp), size = 2) +
  labs(color = "BEC Subzone/Variant") +
  ggspatial::annotation_north_arrow(
    location = "tr", # Position: bottom-right
    which_north = "true", # True North
    pad_x = unit(0.5, "cm"), # Padding from x-axis
    pad_y = unit(0.5, "cm"), # Padding from y-axis
    style = ggspatial::north_arrow_fancy_orienteering() # Style of the arrow
  ) +
  theme(
    legend.position = "bottom"
  )


```
